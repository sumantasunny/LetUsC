#include <stdio.h>

#define N_V 7

int nodeStatus[10];
int nodeColor[10];
int visited = 2;
int added = 1;
int red = 1;
int blue = 2;

void resetStatus(){
    int i;
    for(i=0;i<N_V; i++){
        nodeStatus[i] = 0;
    }
}

void resetColor(){
    int i;
    for(i=0;i<N_V; i++){
        nodeColor[i] = 0;
    }
}

struct Graph{
    int edges[10][10];
}g1, g1t;

struct Queue2{
    int front;
    int rear;
    int qArr[10];
}qDefault={-1, -1, {0,0,0,0,0,0,0,0,0,0}};

typedef struct Queue2 Que;
Que q1, q2;

void addEdge(int source, int end){
   g1.edges[source][end] = 1;
}

void addQ(int item, Que * q){
    //printf("\n>>%d , %d\n", q->front, q->rear);
    if(q->front == -1 && q->rear == -1){
        q->front = 0;
        q->rear = 0;
        q->qArr[q->rear] = item;
    }
    else{
        if((q->rear + 1)%N_V == q->front){
            //printf("\nQueue is full\n");
        }
        else{
            q->rear = (q->rear + 1)%N_V;
            q->qArr[q->rear] = item;
        }
    }
}

int removeQ(Que * q){
    if(q->front == -1 && q->rear == -1){
        //printf("\nQueue is empty\n");
        return -1;
    }
    else{
        int item = q->qArr[q->front];
        if(q->front == q->rear){
            q->front = -1;
            q->rear = -1;
        }
        else{
            q->front = (q->front + 1)%N_V;
        }
        
        //printf("<< %d \n", q->front);
        
        return item;
    }
}

void BFSUtil(int node){
    if(!nodeStatus[node]){
        nodeStatus[node] = visited;
        printf("%d, ", node);
        int i=0;
        for(i=0; i<N_V; i++){
            if(!nodeStatus[i] && g1.edges[node][i]){
                addQ(i, &q1);
            }
        }
        int k;
        while((k=removeQ(&q1))>0){
            BFSUtil(k);
        }
    }
}

void testBFS(){
    int i=0;
    resetStatus();
    for(i=0; i<N_V; i++){
        BFSUtil(i);
    }
}

void BFSConnectedComponentUtil(int node){
    if(!nodeStatus[node]){
        nodeStatus[node] = visited;
        printf("%d, ", node);
        int i=0;
        for(i=0; i<N_V; i++){
            if(!nodeStatus[i] && g1.edges[node][i]){
                nodeStatus[node] = added;
                addQ(i, &q1);
            }
        }
        int k;
        while((k=removeQ(&q1))>0){
            BFSConnectedComponentUtil(k);
        }
    }
}

void testBFSConnectedComponent(){
    int i=0;
    resetStatus();
    printf("\n");
    for(i=0; i<N_V; i++){
        if(!nodeStatus[i]){
            BFSConnectedComponentUtil(i);
            printf("\n");
        }
    }
}


void addToQueueTest(){
    int i=0, j=0;
    for(i=0; i<=N_V; i++){
        for(j=i; j<=N_V+i; j++){
            addQ(j, &q1);
        }
        for(j=i; j<=N_V+i; j++){
            printf("%d, \n", removeQ(&q1));
        }
    }
}

int main(void) {
    q1 = qDefault;
    
    //printf("%d , %d", q1.front, q1.rear);
    
    
	//addEdge(0, 1);
    //addEdge(1, 0);
    addEdge(1, 2);
    addEdge(2, 3);
    //addEdge(3, 0);
    //addEdge(3, 1);
    addEdge(0, 4);
    addEdge(4, 5);
    addEdge(5, 6);
    addEdge(6, 0);
    
    //addToQueueTest();
    //resetStatus();
    //biPartiteTest();
    
    testBFS();
    testBFSConnectedComponent();
    
	return 0;
}

