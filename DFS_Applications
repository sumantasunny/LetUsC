#include <stdio.h>

#define N_V 7

int nodeStatus[10];
int nodeColor[10];
int visited = 1;
int red = 1;
int blue = 2;

void resetStatus(){
    int i;
    for(i=0;i<N_V; i++){
        nodeStatus[i] = 0;
    }
}

void resetColor(){
    int i;
    for(i=0;i<N_V; i++){
        nodeColor[i] = 0;
    }
}

struct Graph{
    int edges[10][10];
}g1, g1t;

struct Stack2{
    int top;
    int stackArr[10];
};

typedef struct Stack2 STK;
STK st1, st2;

void addEdge(int source, int end){
   g1.edges[source][end] = 1;
}

void push(int item, STK * _st){
    //printf("_st.top :: %d\n",_st->top);
    int t = _st->top;
    _st->stackArr[t] = item;
    _st->top = t + 1;
}

int pop(STK * _st){
    int t = _st->top;
    t--;
    int item = _st->stackArr[t];
    _st->top = t;
    return item;
}

void dfsUtil(int node){
    int i;
    nodeStatus[node] = visited;
    printf("%d,", node);
    for(i=0; i<N_V; i++){
        if(g1.edges[node][i] && !nodeStatus[i]){
            dfsUtil(i);
        }
    }
}

void topoLogicalSortUtil(int node){
    int i;
    nodeStatus[node] = visited;
    for(i=0; i<N_V; i++){
        if(g1.edges[node][i] && !nodeStatus[i]){
            topoLogicalSortUtil(i);
        }
    }
    push(node, &st1);
}

void printStack(){
    int i;
    for(i=0; i<N_V; i++){
        printf("%d,", pop(&st1));
    }
    printf("\n");
}

void topoLogicalSort(int node){
    topoLogicalSortUtil(node);
    printStack();
}

int loopFlag = 0;
void loopTestUtil(int node, int start){
    int i;
    nodeStatus[node] = visited;
    for(i=0; i<N_V; i++){
        if(g1.edges[node][i] && !nodeStatus[i]){
            loopTestUtil(i, start);
        }
        if(g1.edges[node][i] && i==start){
            loopFlag += 1;
        }
    }
}

void loopTest(){
    int i=0;
    for(i=0; i<N_V; i++){
        resetStatus();
        loopTestUtil(i, i);
        /*if(loopFlag){
            break;
        }*/
    }
    
    if(loopFlag){
        printf("\nLoop Found Count: %d\n", loopFlag);
        loopFlag=0;
    }
    else{
        printf("\nLoop not Found\n");
    }
}

int biPartiteFlag = 1;
void checkingBipartiteUtil(int node, int startNode, int loopOrder){
    nodeStatus[node] = visited;
    int i=0, loopOrder2=0;
    for(i=0; i<N_V; i++){
        if(g1.edges[node][i]){
            if(!nodeStatus[i]){
                loopOrder2 = loopOrder + 1;
                checkingBipartiteUtil(i, startNode, loopOrder2);
            }
            else if(i==startNode && (loopOrder%2 != 0) && node != startNode){
                biPartiteFlag = 0;
            }
        }
    }
}

void biPartiteTest(){
    int i=0, j=0;
    for(i=0; i<N_V; i++){
        if(!biPartiteFlag){
            break;
        }
        resetStatus();
        checkingBipartiteUtil(i, i, 1);
    }
    
    if(biPartiteFlag){
        printf("\nBiPartite Graph\n");
    }
    else{
        printf("\nNot BiPartite Graph\n");
        biPartiteFlag=1;
    }
}

void stronglyConnectedComponentsUtil(int node){
    int i;
    nodeStatus[node] = visited;
    for(i=0; i<N_V; i++){
        if(g1.edges[node][i] && !nodeStatus[i]){
            stronglyConnectedComponentsUtil(i);
        }
    }
    //printf(">>%d", node);
    push(node, &st2);
}

void transposeGraph(){
    int i, j;
    for(i=0; i<N_V; i++){
        for(j=0; j<N_V; j++){
            g1t.edges[j][i] = g1.edges[i][j];
        }
    }
    
    for(i=0; i<N_V; i++){
        printf("|");
        for(j=0; j<N_V; j++){
            printf("%d ", g1.edges[i][j]);
        }
        printf("|\n");
    }
    
    printf("\n");
    
    for(i=0; i<N_V; i++){
        printf("|");
        for(j=0; j<N_V; j++){
            printf("%d ", g1t.edges[i][j]);
        }
        printf("|\n");
    }
}

void dfsUtilForStronglyConnectedComponents(int node){
    int i;
    nodeStatus[node] = visited;
    printf("%d, ", node);
    for(i=0; i<N_V; i++){
        if(g1t.edges[node][i] && !nodeStatus[i]){
            dfsUtilForStronglyConnectedComponents(i);
        }
    }
}

void stronglyConnectedComponents(){
    resetStatus();
    int i=0;
    for(i=0; i<N_V; i++){
        if(!nodeStatus[i]){
            stronglyConnectedComponentsUtil(i);
        }
    }
    //printf("\nstronglyConnectedComponents %d", 1);
    
    transposeGraph();
    
    resetStatus();
    while(st2.top>0){
      int node = pop(&st2);
      //printf("\nstronglyConnectedComponents %d", node);
      if(!nodeStatus[node]){
        dfsUtilForStronglyConnectedComponents(node);
        printf("\n");
      }
    }
}


int main(void) {
    st1.top = 0;
    st2.top = 0;
    
    //addEdge(0, 1);
    addEdge(1, 0);
    addEdge(1, 2);
    addEdge(2, 3);
    addEdge(3, 0);
    addEdge(0, 4);
    addEdge(4, 5);
    addEdge(5, 6);
    addEdge(6, 0);
    
    resetStatus();
    dfsUtil(0);
    printf("\n");
    resetStatus();
    topoLogicalSort(0);
    
    resetStatus();
    loopTest();
    
    resetColor();
    resetStatus();
    biPartiteTest();
    
    resetStatus();
    stronglyConnectedComponents();
    
	return 0;
}
