#include <stdio.h>

#define nQueens 4

int arr[nQueens][nQueens];

void initArray(){
    int i=0, j=0;
    for(j=0;i<nQueens; i++){
		for(j=0;j<nQueens; j++){
			arr[i][j] = 0;
        }
    }
}

int checkPositionsValidity(int row, int col){
    int flag = 1;
    
    int k = row + 1, l = col + 1;
    while(k<nQueens && l<nQueens){
       if(arr[k][l] == 1){
           flag = 0;
       }
       k++;
       l++;
    }
    
    k = row - 1, l = col - 1;
    while(k>=0 && l>=0){
        if(arr[k][l] == 1){
           flag = 0;
        }
        k--;
        l--;
    }
    
    k = row - 1, l = col + 1;
    while(k>=0 && l<nQueens){
        if(arr[k][l] == 1){
           flag = 0;
        }
        k--;
        l++;
    }
    
    k = row + 1, l = col - 1;
    while(k<nQueens && l>=0){
        if(arr[k][l] == 1){
           flag = 0;
        }
        k++;
        l--;
    }
    
    int x=0;
    while(x<nQueens){
        if(arr[x][col] == 1){
           flag = 0;
        }
        x++;
    }
    
    int y=0;
    while(y<nQueens){
        if(arr[row][y] == 1){
           flag = 0;
        }
        y++;
    }
    return flag;
}

void nQueensProblem(int row, int col){
    int a=0, b = 0;
    
    if(row >= nQueens){
        printf("\n");
        for(a=0;a<nQueens; a++){
            printf("|");
            for(b=0;b<nQueens; b++){
                printf("%d\t", arr[a][b]);
            }
            printf("|\n");
        }
        row--;
        return ;
    }
    int i;
    for(i=0; i<nQueens; i++){
        if(checkPositionsValidity(row, i)){
            arr[row][i] = 1;
            nQueensProblem(row+1, 0);
            arr[row][i] = 0;
        }
    }
    row--;
}

int main(void) {
	initArray();
	nQueensProblem(0,0);
	return 0;
}
